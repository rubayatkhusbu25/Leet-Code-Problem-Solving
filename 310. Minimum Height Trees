#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        // Edge case: if there are less than or equal to 1 node, return it
        if (n <= 1) {
            vector<int> result;
            for (int i = 0; i < n; ++i)
                result.push_back(i);
            return result;
        }

        // Create adjacency list to represent the graph
        vector<vector<int>> adjList(n);
        vector<int> degree(n, 0); // Degree of each node

        // Populate adjacency list and degree array
        for (const auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adjList[u].push_back(v);
            adjList[v].push_back(u);
            degree[u]++;
            degree[v]++;
        }

        // Initialize a queue with nodes of degree 1
        queue<int> leaves;
        for (int i = 0; i < n; ++i) {
            if (degree[i] == 1) {
                leaves.push(i);
            }
        }

        // Perform topological sorting and remove leaves layer by layer
        while (n > 2) {
            int leavesCount = leaves.size();
            n -= leavesCount;
            for (int i = 0; i < leavesCount; ++i) {
                int leaf = leaves.front();
                leaves.pop();
                for (int neighbor : adjList[leaf]) {
                    if (--degree[neighbor] == 1) {
                        leaves.push(neighbor);
                    }
                }
            }
        }

        // The remaining nodes in the queue are the roots of minimum height trees
        vector<int> result;
        while (!leaves.empty()) {
            result.push_back(leaves.front());
            leaves.pop();
        }
        return result;
    }
};
