class Solution {
public:
    long long wonderfulSubstrings(std::string word) {
        int n = word.size();
        std::vector<int> count(1024, 0); // To store count of each bitmask (2^10 = 1024)
        count[0] = 1; // For an empty string
        long long result = 0;
        int mask = 0; // Bitmask to keep track of characters' parity

        for (char ch : word) {
            int bit = 1 << (ch - 'a');
            mask ^= bit; // Toggle the bit corresponding to the character
            result += count[mask]; // Substrings with all characters' parity being even
            for (int i = 0; i < 10; ++i) { // Check substrings with one character's parity being odd
                result += count[mask ^ (1 << i)];
            }
            count[mask]++;
        }

        return result;
    }
};
